<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[PacktPub.Getting.Started.with.Google.Guava]]></title>
      <url>http://mei6.site/2016/11/12/PacktPub-Getting-Started-with-Google-Guava/</url>
      <content type="html"><![CDATA[<!-- abstract -->
<p><img src="http://ogjeb66bz.bkt.clouddn.com/14789679847753.jpg" alt=""></p>
<p>Google 的java库，抽空看一下</p>
<a id="more"></a>
<!-- 开始正文 -->
<p>Google的Java工具包，从08年开始的项目，看看有什么对我有帮助的。</p>
<h2 id="准备工作"><a class="header-anchor" href="#准备工作"> </a>准备工作</h2>
<p>添加Guava依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Guava一直在维护，目前最新版本是20.0，2016.10有新的release：
<img src="http://ogjeb66bz.bkt.clouddn.com/14789742921184.jpg" alt=""></p>
<p>下载书中的源码
<a href="https://www.packtpub.com/books/content/support/13091" target="_blank" rel="external">https://www.packtpub.com/books/content/support/13091</a></p>
<p>创建一个测试的小项目，修改Pom，下载的代码版本有点儿老，只更新了maven-compiler-plugin的版本，其他依赖的版本没动，避免升级版本示例代码跑不起来。</p>
<p>把示例代码拷入到项目中，包括测试代码，用Maven Install一下(skip test，个别单元测试有问题)，在项目根目录下创建一个git库，share到GitHub，地址：<a href="https://github.com/fg-meizhi/Getting.Started.with.Google.Guava" target="_blank" rel="external">Getting.Started.with.Google.Guava</a>。</p>
<p>好了，看看Guava都能做什么。</p>
<hr>
<h2 id="基本工具类"><a class="header-anchor" href="#基本工具类"> </a>基本工具类</h2>
<h3 id="joiner"><a class="header-anchor" href="#joiner"> </a>Joiner</h3>
<p>通常的字符串操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buildString</span><span class="params">(List&lt;String&gt; stringList, String delimiter)</span></span>&#123;</div><div class="line">   StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">   <span class="keyword">for</span> (String s : stringList) &#123;</div><div class="line">       <span class="keyword">if</span>(s !=<span class="keyword">null</span>)&#123;</div><div class="line">           builder.append(s).append(delimiter);</div><div class="line">       &#125; &#125;</div><div class="line">   builder.setLength(builder.length() - delimiter.length());</div><div class="line">   <span class="keyword">return</span> builder.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Joiner操作，跳过空值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Joiner.on(<span class="string">"|"</span>).skipNulls().join(stringList);</div></pre></td></tr></table></figure>
<p>替换空值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Joiner.on(<span class="string">"|"</span>).useForNull(<span class="string">"no value"</span>).join(stringList);</div></pre></td></tr></table></figure>
<p>另外两个处理字符串的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Joiner stringJoiner = Joiner.on(<span class="string">"|"</span>).skipNulls();</div><div class="line"><span class="comment">//the useForNull() method returns a new instance of the Joiner!</span></div><div class="line">stringJoiner.useForNull(<span class="string">"missing"</span>);</div><div class="line">stringJoiner.join(<span class="string">"foo"</span>,<span class="string">"bar"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">-------</div><div class="line"></div><div class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">Joiner joiner = Joiner.on(<span class="string">"|"</span>).skipNulls();</div><div class="line"><span class="comment">// returns the StringBuilder instance with the values foo,bar,baz appeneded with "|" delimiters</span></div><div class="line">joiner.appendTo(stringBuilder,<span class="string">"foo"</span>,<span class="string">"bar"</span>,<span class="string">"baz"</span>)</div></pre></td></tr></table></figure>
<p>Joiner不仅仅处理字符串，还能处理各种集合类型，调用对象的<code>toString</code>方法，append 集合到流：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"path"</span>)):List&lt;Date&gt; dateList = getDates();</div><div class="line">Joiner joiner = Joiner.on(<span class="string">"#"</span>).useForNulls(<span class="string">" "</span>);<span class="comment">// returns the FileWriter instance with the values appended into it</span>joiner.appendTo(fileWriter,dateList);</div></pre></td></tr></table></figure>
<p>MapJoiner方法处理键值对类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mapJoiner = Joiner.on(<span class="string">"#"</span>).withKeyValueSeparator(<span class="string">"="</span>);</div></pre></td></tr></table></figure>
<h3 id="splitter"><a class="header-anchor" href="#splitter"> </a>Splitter</h3>
<p>用分隔符拆分字符串</p>
<p>不使用类库的方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String testString = <span class="string">"Monday,Tuesday,,Thursday,Friday,,"</span>;</div><div class="line"></div><div class="line"><span class="comment">// parts is [Monday, Tuesday, , Thursday,Friday]</span></div><div class="line">String[] parts = testString.split(<span class="string">","</span>);</div></pre></td></tr></table></figure>
<p>Splitter，还支持正则表达式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Splitter.on(<span class="string">'|'</span>).split(<span class="string">"foo|bar|baz"</span>);Splitter splitter = Splitter.on(<span class="string">"\\d+"</span>);</div></pre></td></tr></table></figure>
<p>trim头尾的空格</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Splits on '|' and removes any leading or trailing whitespace</span></div><div class="line">Splitter splitter = Splitter.on(<span class="string">'|'</span>).trimResults();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Splitter splitter = Splitter.on(<span class="string">'|'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Next call returns a new instance, does not modify the original!</span></div><div class="line"><span class="comment">// 返回新实例，不修改原始对象</span></div><div class="line">splitter.trimResults();</div><div class="line"></div><div class="line"><span class="comment">// Result would still contain empty elements</span></div><div class="line">Iterable&lt;String&gt; parts = splitter.split(<span class="string">"1|2|3|||"</span>);</div></pre></td></tr></table></figure>
<p>MapSplitter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MapSplitter is defined as an inner class of Splitter</span></div><div class="line">Splitter.MapSplitter mapSplitter = Splitter.on(<span class="string">"#"</span>).withKeyValueSeparator(<span class="string">"="</span>);</div></pre></td></tr></table></figure>
<h3 id="strings-in-guava"><a class="header-anchor" href="#strings-in-guava"> </a>strings in Guava</h3>
<h4 id="charsets"><a class="header-anchor" href="#charsets"> </a>Charsets</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] bytes2 = <span class="string">"foobarbaz"</span>.getBytes(Charsets.UTF_8);</div></pre></td></tr></table></figure>
<h4 id="strings"><a class="header-anchor" href="#strings"> </a>Strings</h4>
<p>Have you ever had to write something like the following?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"foo"</span>);</div><div class="line"></div><div class="line"><span class="keyword">char</span> c = <span class="string">'x'</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</div><div class="line">    builder.append(c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> builder.toString();</div></pre></td></tr></table></figure>
<p>The previous example, which spans 6 lines of code, can now be replaced with one line.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Strings.padEnd(<span class="string">"foo"</span>,<span class="number">6</span>,<span class="string">'x'</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>中间参数6表示返回字符串的最小长度，而不是添加了多少次x。</p>
</blockquote>
<p>如遇null，建议使用nullToEmpty。</p>
<h4 id="charmatcher"><a class="header-anchor" href="#charmatcher"> </a>CharMatcher</h4>
<p>字符匹配、替换操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CharMatcher.BREAKING_WHITESPACE.replaceFrom(stringWithLinebreaks,<span class="string">' '</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemoveWhiteSpace</span><span class="params">()</span></span>&#123;</div><div class="line">    String tabsAndSpaces = <span class="string">"String  with      spaces     and           tabs"</span>;</div><div class="line">    String expected = <span class="string">"String with spaces and tabs"</span>;</div><div class="line">    String scrubbed = CharMatcher.WHITESPACE.collapseFrom(tabsAndSpaces,<span class="string">' '</span>);</div><div class="line">    assertThat(scrubbed,is(expected));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提取特定字符，字符表达式还可以连写，组成多个条件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetainFrom</span><span class="params">()</span></span>&#123;</div><div class="line">    String lettersAndNumbers = <span class="string">"foo989yxbar234"</span>;</div><div class="line">    String expected = <span class="string">"989234"</span>;</div><div class="line">    String retained = CharMatcher.JAVA_DIGIT.retainFrom(lettersAndNumbers);</div><div class="line">    assertThat(expected,is(retained));</div><div class="line">&#125;</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">CharMatcher cm = CharMatcher.JAVA_DIGIT.or(CharMatcher.WHITESPACE);</div></pre></td></tr></table></figure>
<h4 id="preconditions"><a class="header-anchor" href="#preconditions"> </a>Preconditions</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreconditionExample</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] values = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PreconditionExample</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="comment">//returns value of object if not null</span></div><div class="line">        <span class="keyword">this</span>.state = checkNotNull(state,<span class="string">"Label can't be null"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCurrentIndexValue</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> valueToSet)</span> </span>&#123;</div><div class="line">        <span class="comment">//Check index valid first</span></div><div class="line">        <span class="keyword">this</span>.currentIndex = checkElementIndex(index, values.length, <span class="string">"Index out of bounds for values"</span>);</div><div class="line">        <span class="comment">//Validate state of value</span></div><div class="line">        checkArgument(valueToSet &lt;= <span class="number">100</span>,<span class="string">"Value can't be more than 100"</span>);</div><div class="line">        values[<span class="keyword">this</span>.currentIndex] = valueToSet;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOperation</span><span class="params">()</span></span>&#123;</div><div class="line">        checkState(validateObjectState(),<span class="string">"Can't perform operation"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validateObjectState</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.state.equalsIgnoreCase(<span class="string">"open"</span>) &amp;&amp; values[<span class="keyword">this</span>.currentIndex]==<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getValues() &#123;</div><div class="line">        <span class="keyword">return</span> values;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要方法：</p>
<ul>
<li>checkNotNull (T object, Object message)</li>
<li>checkElementIndex (int index, int size, Object message)</li>
<li>checkArgument(Boolean expression, Object message)</li>
<li>checkState(Boolean expression, Object message)</li>
</ul>
<p>用来</p>
<ul>
<li>检查字符串错误，返回错误消息文本</li>
<li>检查数字，正确返回数字本身，错误抛出异常</li>
</ul>
<p>可以查看源码com.google.common.base.Preconditions的实现，封装了各种检查</p>
<h3 id="object-utilities"><a class="header-anchor" href="#object-utilities"> </a>Object utilities</h3>
<p>重写toString方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Objects.toStringHelper(<span class="keyword">this</span>)</div><div class="line">            .omitNullValues()</div><div class="line">            .add(<span class="string">"title"</span>, title)</div><div class="line">            .add(<span class="string">"author"</span>, author)</div><div class="line">            .add(<span class="string">"publisher"</span>, publisher)</div><div class="line">            .add(<span class="string">"price"</span>, price)</div><div class="line">            .add(<span class="string">"isbn"</span>, isbn).toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重写hashCode方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Objects.hashCode(title, author, publisher, isbn);&#125;</div></pre></td></tr></table></figure>
<p>重写compareTo方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Book o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ComparisonChain.start()</div><div class="line">            .compare(<span class="keyword">this</span>.title, o.getTitle())</div><div class="line">            .compare(<span class="keyword">this</span>.author, o.getAuthor())</div><div class="line">            .compare(<span class="keyword">this</span>.publisher, o.getPublisher())</div><div class="line">            .compare(<span class="keyword">this</span>.isbn, o.getIsbn())</div><div class="line">            .compare(<span class="keyword">this</span>.price, o.getPrice())</div><div class="line">            .result();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="功能编程"><a class="header-anchor" href="#功能编程"> </a>功能编程</h2>
<h3 id="function接口"><a class="header-anchor" href="#function接口"> </a>Function接口</h3>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有了没事儿瞎咧咧的地方]]></title>
      <url>http://mei6.site/2016/11/12/hello-there/</url>
      <content type="html"><![CDATA[<p>一直没有养成写博客的习惯，几年前在javaeye写过一点儿东西，后来东西都是放在Evernote里面。</p>
<p>借助几篇文章，很快的帮我搭起来这个简单的博客，感谢下面这几篇文章的作者，把他们列在这里，希望能帮助有我这样需求的人少走弯路：</p>
<ul>
<li><a href="http://jiji262.github.io/2016/04/15/2016-04-15-hexo-github-pages-blog/index.html" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">大道至简——Hexo简洁主题推荐</a></li>
<li><a href="http://www.selfrebuild.net/2016/08/25/mweb-hexo-blog-config/" target="_blank" rel="external">使用 Mweb 配合 hexo 编写 github 博客</a></li>
<li><a href="https://joilence.github.io/2016/07/14/improve-blog/" target="_blank" rel="external">Hexo 博客进阶配置与常见问题</a></li>
<li><a href="http://codingpub.github.io/2016/04/10/%E5%AE%9A%E5%88%B6Hexo-maupassant/" target="_blank" rel="external">定制Hexo - maupassant</a></li>
<li><a href="https://qifuguang.me/2016/08/14/%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/" target="_blank" rel="external">如何为博客增加打赏功能</a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
